// Code generated by @apexlang/codegen. DO NOT EDIT.

package iotacsv

import (
	"context"

	"github.com/nanobus/iota/go/invoke"
	"github.com/nanobus/iota/go/msgpack"
	"github.com/nanobus/iota/go/payload"
	"github.com/nanobus/iota/go/rx/flux"
	"github.com/nanobus/iota/go/transform"
)

type CSVParseArgs struct {
	Options Options `json:"options" yaml:"options" msgpack:"options"`
}

func (o *CSVParseArgs) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "options":
			err = o.Options.Decode(decoder)
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *CSVParseArgs) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(1)
	encoder.WriteString("options")
	o.Options.Encode(encoder)

	return nil
}

func (o *Options) Decode(decoder msgpack.Reader) error {
	numFields, err := decoder.ReadMapSize()
	if err != nil {
		return err
	}

	for numFields > 0 {
		numFields--
		field, err := decoder.ReadString()
		if err != nil {
			return err
		}
		switch field {
		case "delimiter":
			o.Delimiter, err = decoder.ReadString()
		case "quote_char":
			o.Quote_char, err = decoder.ReadString()
		case "row_separator":
			o.Row_separator, err = decoder.ReadString()
		case "escape_char":
			o.Escape_char, err = decoder.ReadString()
		case "header_row":
			o.Header_row, err = decoder.ReadBool()
		default:
			err = decoder.Skip()
		}
		if err != nil {
			return err
		}
	}

	return nil
}

func (o *Options) Encode(encoder msgpack.Writer) error {
	if o == nil {
		encoder.WriteNil()
		return nil
	}
	encoder.WriteMapSize(5)
	encoder.WriteString("delimiter")
	encoder.WriteString(o.Delimiter)
	encoder.WriteString("quote_char")
	encoder.WriteString(o.Quote_char)
	encoder.WriteString("row_separator")
	encoder.WriteString(o.Row_separator)
	encoder.WriteString("escape_char")
	encoder.WriteString(o.Escape_char)
	encoder.WriteString("header_row")
	encoder.WriteBool(o.Header_row)

	return nil
}

func RegisterCSV(svc CSV) {
	invoke.ExportRequestChannel("csv.v1.CSV", "parse", cSVParseWrapper(svc))
}

func cSVParseWrapper(svc CSV) invoke.RequestChannelHandler {
	return func(ctx context.Context, p payload.Payload, in flux.Flux[payload.Payload]) flux.Flux[payload.Payload] {
		var inputArgs CSVParseArgs
		if err := transform.CodecDecode(p, &inputArgs); err != nil {
			return flux.Error[payload.Payload](err)
		}
		response := svc.Parse(ctx, &inputArgs.Options, flux.Map(in, transform.Bytes.Decode))
		return flux.Map(response, func(value map[string]string) (payload.Payload, error) {
			return transform.Any.Encode(value)
		})
	}
}

type Dependencies struct {
}

type Client struct {
	caller invoke.Caller
}

func New(caller invoke.Caller) *Client {
	return &Client{
		caller: caller,
	}
}
func (c *Client) Dependencies() Dependencies {
	return Dependencies{}
}

func GetDependencies(caller invoke.Caller) Dependencies {
	c := New(caller)
	return c.Dependencies()
}
