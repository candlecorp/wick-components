# yaml-language-server: $schema=https://github.com/candlecorp/wick/releases/download/0.8.0/schema.json
---
name: 'object'
kind: wick/component@v1
metadata:
  description: 'A component that will take differnet types of contents and parse them into a common object that can be used in the wick flow. Can also create and manipulate new / existing objects.'
  authors: ['Candle Corporation']
  licenses: ['Apache-2.0']
  documentation: Source code available at https://github.com/candlecorp/wick-components/tree/main/components
  version: '0.0.1'
component:
  kind: wick/component/wasmrs@v1
  ref: build/object.signed.wasm
  operations:
    - name: serialize
      inputs:
        - name: content
          type: string
        - name: content_type
          type: string
      outputs:
        - name: output
          type: object
    - name: new
      inputs:
        - name: key
          type: string
        - name: value
          type: object
      outputs:
        - name: output
          type: object
    - name: select
      inputs:
        - name: object
          type: object
        - name: path
          type: string
      outputs:
        - name: output
          type: object
tests:
  - name: new-test
    operation: new
    input:
      - name: key
        data: 'name'
      - name: value
        data: 'John'
    output:
      - name: output
        data: { 'name': 'John' }
      - name: output
        flags:
          done: true
  - name: select-test
    operation: select
    input:
      - name: object
        data: { 'name': 'John', 'age': 130, 'city': 'New York' }
      - name: path
        data: '$.city'
    output:
      - name: output
        data: 'New York'
      - name: output
        flags:
          done: true
  - name: select-nested-test
    operation: select
    input:
      - name: object
        data:
          {
            'name': 'John',
            'age': 130,
            'location': { 'city': 'New York', 'state': 'NY', 'country': 'USA' },
          }
      - name: path
        data: '$.location.city'
    output:
      - name: output
        data: 'New York'
      - name: output
        flags:
          done: true
  - name: serialize-test-json
    operation: serialize
    input:
      - name: content
        data: '{ "name": "John", "age": 130, "city": "New York" }'
      - name: content_type
        data: 'application/json'
    output:
      - name: output
        data: { 'name': 'John', 'age': 130, 'city': 'New York' }
      - name: output
        flags:
          done: true
  - name: serialize-test-xml
    operation: serialize
    input:
      - name: content
        data: '<person><name>John</name><age>130</age><city>New York</city></person>'
      - name: content_type
        data: 'application/xml'
    output:
      - name: output
        data: { 'name': 'John', 'age': '130', 'city': 'New York' }
      - name: output
        flags:
          done: true
  - name: serialize-test-form-encode
    operation: serialize
    input:
      - name: content
        data: 'name=John&age=130&city=New%20York'
      - name: content_type
        data: 'application/x-www-form-urlencoded'
    output:
      - name: output
        data: { 'name': 'John', 'age': '130', 'city': 'New York' }
      - name: output
        flags:
          done: true
